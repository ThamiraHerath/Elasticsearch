/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */
import org.elasticsearch.gradle.internal.precommit.CheckForbiddenApisTask

apply plugin: 'elasticsearch.build'

configurations {
  entitlementAgent
  entitlementBridge
  entitlementRuntime
}

dependencies {
  compileOnly project(":server")
  compileOnly project(":libs:elasticsearch-cli")

  testImplementation project(":test:framework")

  // For locating the entitlement jars
  entitlementAgent project(":distribution:tools:entitlement-agent")
  entitlementBridge project(":distribution:tools:entitlement-bridge")
  entitlementRuntime project(":distribution:tools:entitlement-runtime")
}

tasks.named('jar').configure {
  manifest {
    attributes(
      'ES-Entitlement-Agent': "${configurations.entitlementAgent.singleFile}"
      , 'ES-Entitlement-Bridge': "${configurations.entitlementBridge.singleFile}"
      , 'ES-Entitlement-Runtime': "${configurations.entitlementRuntime.singleFile}"
    )
  }
}

tasks.named("test").configure {
  systemProperty "tests.security.manager", "false"
}

tasks.withType(CheckForbiddenApisTask).configureEach {
  replaceSignatureFiles 'jdk-signatures'
}

["javadoc", "loggerUsageCheck", "jarHell"].each { tsk ->
  tasks.named(tsk).configure { enabled = false }
}

tasks.named("test").configure {
  // this is necessary to jvm options can invoke java to find final options
  systemProperty "tests.system_call_filter", "false"
}
